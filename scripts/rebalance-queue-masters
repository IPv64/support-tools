#!/usr/bin/env bash

set -o errexit
set -o nounset

now()
{
    date '+%Y%m%d-%H:%M:%S'
}

errexit()
{
    echo "$(now) [ERROR] $*" 1>&2
    exit 1
}

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]
then
    errexit 'this script requires bash version 4 or greater'
fi

declare -r orig_IFS="$IFS"

# defaults
declare -r default_vhost='/'
declare -r default_queue_regex='.*'
declare -r default_disable_health_check='false'
declare -ri default_max_count=60

# Nothing to modify from here to the end
declare -a nodes
declare -i node_count=0

sync_queue()
{
    echo -n "$(now) [INFO] "
    rabbitmqctl sync_queue -p "$vhost" "$1"
}

get_queue_master()
{
    local -r queue="$1"
    rabbitmqctl -q -p "$vhost" list_queues name pid | grep -E "^$queue[[:space:]]" | cut -f2 | sed -e 's/[><]//g' -e 's/\(\.[[:digit:]][[:digit:]]*\)\{3\}//g'
}

ensure_node_health()
{
    # shellcheck disable=SC2155
    local tmp="$(mktemp)"
    for n in "${nodes[@]}"
    do
        if ! rabbitmqctl -n "$n" node_health_check > "$tmp" 2>&1
        then
            echo "$(now) [ERROR] Node '$n' failed health check:" 1>&2
            cat "$tmp" 1>&2
            rm -f "$tmp"
            exit 1
        fi
    done
    rm -f "$tmp"
}

set_temp_queue_policies()
{
    echo "$(now) [INFO] Setting temporary policies on vhost: $vhost"

    ensure_node_health

    local queue_and_pid=''
    local queue=''
    local pid=''
    local current_master=''
    local new_master=''
    local updated_master=''
    local policy_set_master=''
    local -i count=0

    IFS=$'\n'
    while true; do
        nodes_and_masters=$((rabbitmqctl eval 'rabbit_nodes:all_running().' | sed -e "s/[][']//g" | tr ',' '\n'; rabbitmqctl -q -p "$vhost" list_queues pid) | grep rabbit | sed -e 's/[><]//g' -e 's/\(\.[[:digit:]][[:digit:]]*\)\{3\}//g' | sort | uniq -c | sort -n)
        num_nodes=$(echo "$nodes_and_masters" | wc -l)
        max_node=$(echo "$nodes_and_masters" | tail -n 1 | awk '{print $2}')
        min_node=$(echo "$nodes_and_masters" | head -n 1 | awk '{print $2}')
        max_node_number=$(echo "$nodes_and_masters" | tail -n 1 | awk '{print $1}')
        min_node_number=$(echo "$nodes_and_masters" | head -n 1 | awk '{print $1}')
        max_min_diff=$(( $max_node_number - $min_node_number))
        # echo "----"
        echo -e "$(now) [INFO] Current status: \n$nodes_and_masters"
        # echo "MIN: $min_node ($min_node_number)"
        # echo "MAX: $max_node ($max_node_number)"
        # echo "NUM: $num_nodes"
        # echo "DIFF: $max_min_diff"
        # echo "----"

        if [[ "$max_min_diff" -le "$num_nodes" ]]; then
            echo "$(now) [INFO] Already Balanced. Exiting!"
            exit 0
        fi

        queue_and_pid=$(rabbitmqctl -q -p "$vhost" list_queues name pid 2>&1 | grep -E "$queue_regex" | grep "$max_node" | head -n 1)

        if [[ $disable_health_check == 'false' ]]
        then
            ensure_node_health
        fi

        IFS=$'\t' read -r queue pid <<< "$queue_and_pid"

        IFS="$orig_IFS"
        current_master="$(sed -e 's/[><]//g' -e 's/\(\.[[:digit:]][[:digit:]]*\)\{3\}//g' <<< "$pid")"

        new_master="$min_node"
        if [[ $new_master == "$current_master" ]]
        then
            echo "$(now) [INFO] Not updating current queue master '$current_master' for queue '$queue'"
        else
            echo "$(now) [INFO] Updating queue master for queue '$queue' from '$current_master' to '$new_master'"
            echo -n "$(now) [INFO] "
            rabbitmqctl set_policy -p "$vhost" --priority 990 --apply-to 'queues' "$queue-ha-temp" "^$queue$" '{"ha-mode":"exactly","ha-params":1}'
            sync_queue "$queue"

            policy_set_master="{\"ha-mode\":\"nodes\",\"ha-params\":[\"$new_master\"]}"
            echo -n "$(now) [INFO] "
            rabbitmqctl set_policy -p "$vhost" --priority 992 --apply-to 'queues' "$queue-ha-temp" "^$queue$" "$policy_set_master"
            sync_queue "$queue"

            count=0
            while true
            do
                if (( count == max_count ))
                then
                    echo "$(now) [WARNING] Queue master not updated for $queue, reached max retries (attemtps: $count). Moving to the next one."
                    break
                fi

                IFS="$orig_IFS"
                updated_master="$(get_queue_master "$queue")"
                if [[ $new_master == "$updated_master" ]]
                then
                    echo "$(now) [INFO] Queue master successfully updated: '$updated_master'"
                    break
                else
                    (( count = count + 1 ))
                    echo "$(now) [WARNING] queue master has not yet updated, wanted '$new_master', got '$updated_master' (attempts: $count)"
                    sleep 5
                fi
            done

            echo -n "$(now) [INFO] "
            rabbitmqctl clear_policy -p "$vhost" "$queue-ha-temp"
            sync_queue "$queue"
        fi

    done

    IFS="$orig_IFS"
}

validate()
{
    for cmd in erl rabbitmqctl
    do
        if ! command -v "$cmd" &> /dev/null
        then
            errexit "'$cmd' must be executable and in your PATH"
        fi
    done

    local -i i=0
    for node in $(rabbitmqctl eval 'rabbit_nodes:all_running().' | sed -e "s/[][']//g" -e 's/,/ /g')
    do
        nodes[$i]="$node"
        (( i = i + 1 ))
    done

    node_count="${#nodes[@]}"
    if (( node_count < 2 ))
    then
        errexit "At least two clustered nodes are required for running this script!"
    fi
}

usage()
{
    cat << EOF
$0 [-d] [-h] [-c count] [-p vhost] [-r regex]

-d          disable checking the node health before applying
            the queue policies. Default is '$default_disable_health_check'
-h          show this help message
-c count    use max retries for checking if the queue has moved to the new
            master. Default is ${default_max_count}
-p vhost    use 'vhost' instead of default '$default_vhost'
-r regex    use 'regex' to select queues for which the queue master
            should be migrated. Default is '$default_queue_regex'
EOF
}

parse_options()
{
    local OPTARG
    local OPTIND
    local opt
    local vhost_opt_set='false'
    local queue_regex_opt_set='false'
    local disable_health_check_opt_set='false'
    local max_count_opt_set='false'

    while getopts 'dhc:p:r:' opt "$@"
    do
        case "$opt" in
            d)
                disable_health_check_opt_set='true'
                declare -gr disable_health_check='true'
                ;;
            h)
                usage
                exit 0
                ;;
            c)
                max_count_opt_set='true'
                declare -gri max_count="$OPTARG"
                ;;
            p)
                vhost_opt_set='true'
                declare -gr vhost="$OPTARG"
                ;;
            r)
                queue_regex_opt_set='true'
                declare -gr queue_regex="$OPTARG"
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ $vhost_opt_set == 'false' ]]
    then
        declare -gr vhost="$default_vhost"
    fi
    if [[ $queue_regex_opt_set == 'false' ]]
    then
        declare -gr queue_regex="$default_queue_regex"
    fi
    if [[ $disable_health_check_opt_set == 'false' ]]
    then
        declare -gr disable_health_check="$default_disable_health_check"
    fi
    if [[ $max_count_opt_set == 'false' ]]
    then
        declare -gri max_count=${default_max_count}
    fi
}

main()
{
    parse_options "$@"
    validate
    set_temp_queue_policies
}

main "$@"
